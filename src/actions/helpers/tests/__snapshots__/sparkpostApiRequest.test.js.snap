// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Helper: SparkPost API Request failure cases should dispatch a logout action on a 401 with no refresh token 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "type": "LOGOUT",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should dispatch a logout action on a 403 response 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "type": "LOGOUT",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should dispatch a special 5xx error action 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "payload": Object {
      "message": "API call failed",
      "response": Object {
        "data": Object {
          "results": Array [],
        },
        "status": 500,
      },
    },
    "type": "TEST_FAIL",
  },
  Object {
    "details": "API call failed",
    "message": "Something went wrong.",
    "type": "error",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should handle a failed API call 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "payload": Object {
      "message": "API call failed",
      "response": Object {
        "data": Object {
          "results": Array [],
        },
        "status": 400,
      },
    },
    "type": "TEST_FAIL",
  },
  Object {
    "details": "API call failed",
    "message": "Something went wrong.",
    "type": "error",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should log out on 403 when account status is unknown 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "type": "LOGOUT",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should not log out on a 403 while suspended 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "type": "SHOW_SUSPENSION_ALERT",
  },
  Object {
    "type": "FETCH_ACCOUNT",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should not show an error alert when a GET returns 404 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "showErrorAlert": false,
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "showErrorAlert": false,
      "url": "/some/path",
    },
    "payload": Object {
      "message": "API call failed",
      "response": Object {
        "data": Object {
          "results": Array [],
        },
        "status": 404,
      },
    },
    "type": "TEST_FAIL",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases should not show error alert when request failed 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "showErrorAlert": false,
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "showErrorAlert": false,
      "url": "/some/path",
    },
    "payload": Object {
      "message": "API call failed",
      "response": Object {
        "data": Object {
          "results": Array [],
        },
        "status": 400,
      },
    },
    "type": "TEST_FAIL",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases with refresh tokens should get a refresh token and re-dispatch 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "retries": 1,
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "type": "REFRESH",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "retries": 1,
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "retries": 1,
      "url": "/some/path",
    },
    "payload": Array [],
    "type": "TEST_SUCCESS",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases with refresh tokens should only retry 3 times 1`] = `
Array [
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_MAX_RETRIES_PENDING",
  },
  Object {
    "type": "REFRESH",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_MAX_RETRIES_PENDING",
  },
  Object {
    "type": "REFRESH",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_MAX_RETRIES_PENDING",
  },
  Object {
    "type": "REFRESH",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_MAX_RETRIES_PENDING",
  },
  Object {
    "type": "LOGOUT",
  },
]
`;

exports[`Helper: SparkPost API Request failure cases with refresh tokens should only retry once with the same token 1`] = `
Array [
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_ONE_RETRY_PER_TOKEN_PENDING",
  },
  Object {
    "type": "REFRESH",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_ONE_RETRY_PER_TOKEN_PENDING",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_ONE_RETRY_PER_TOKEN_PENDING",
  },
  Object {
    "meta": Object {
      "retries": 3,
    },
    "type": "TEST_ONE_RETRY_PER_TOKEN_PENDING",
  },
  Object {
    "type": "LOGOUT",
  },
]
`;

exports[`Helper: SparkPost API Request should successfully call the API 1`] = `
Array [
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "type": "TEST_PENDING",
  },
  Object {
    "meta": Object {
      "method": "GET",
      "url": "/some/path",
    },
    "payload": Array [],
    "type": "TEST_SUCCESS",
  },
]
`;
