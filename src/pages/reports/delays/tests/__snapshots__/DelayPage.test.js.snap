// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DelayPage:  should render page 1`] = `
<Page
  empty={Object {}}
  title="Delay Report"
>
  <Connect(Filters)
    onShare={[Function]}
    refresh={[Function]}
  />
  <MetricsSummary
    rateTitle="Delayed Rate"
    rateValue={0.1}
    relativeRange="hour"
    secondaryMessage="10 were delayed on first attempt."
  >
    <strong>
      10
    </strong>
     of your messages were delayed of 
    <strong>
      10,000
    </strong>
     messages accepted
  </MetricsSummary>
  <Panel
    className="ReasonsTable"
    title="Delayed Messages"
  >
    <TableCollection
      columns={
        Array [
          Object {
            "label": "Reason",
            "width": "45%",
          },
          "Domain",
          "Delayed",
          "Delayed First Attempt (%)",
        ]
      }
      defaultSortColumn={null}
      defaultSortDirection="asc"
      getRowData={[Function]}
      pagination={true}
      rows={
        Array [
          Object {
            "count_delayed": 100,
            "count_delayed_first": 1,
            "reason": "my reason",
          },
        ]
      }
    />
  </Panel>
  <ShareModal
    handleToggle={[Function]}
    open={false}
    query={Object {}}
  />
</Page>
`;

exports[`DelayPage:  should render row data properly 1`] = `
Array [
  <LongTextContainer
    text="bad delay"
  >
    <div>
      bad delay
    </div>
  </LongTextContainer>,
  <UnstyledLink
    onClick={[Function]}
  >
    <a
      onClick={[Function]}
    >
      gmail.com
    </a>
  </UnstyledLink>,
  1,
  <span>
    10
     (
    <Percent
      value={1}
    >
      1%
    </Percent>
    )
  </span>,
]
`;

exports[`DelayPage:  should show empty message when there are no reasons 1`] = `
<Page
  empty={Object {}}
  title="Delay Report"
>
  <Connect(Filters)
    onShare={[Function]}
    refresh={[Function]}
  />
  <MetricsSummary
    rateTitle="Delayed Rate"
    rateValue={0.1}
    relativeRange="hour"
    secondaryMessage="10 were delayed on first attempt."
  >
    <strong>
      10
    </strong>
     of your messages were delayed of 
    <strong>
      10,000
    </strong>
     messages accepted
  </MetricsSummary>
  <Panel
    className="ReasonsTable"
    title="Delayed Messages"
  >
    <Empty
      message="No delay reasons to report"
      title="Delayed Messages"
    />
  </Panel>
  <ShareModal
    handleToggle={[Function]}
    open={false}
    query={Array []}
  />
</Page>
`;

exports[`DelayPage:  should show loading indicator when loading table 1`] = `
<Page
  empty={Object {}}
  title="Delay Report"
>
  <Connect(Filters)
    onShare={[Function]}
    refresh={[Function]}
    shareDisabled={true}
  />
  <MetricsSummary
    rateTitle="Delayed Rate"
    rateValue={0.1}
    relativeRange="hour"
    secondaryMessage="10 were delayed on first attempt."
  >
    <strong>
      10
    </strong>
     of your messages were delayed of 
    <strong>
      10,000
    </strong>
     messages accepted
  </MetricsSummary>
  <Panel
    className="ReasonsTable"
    title="Delayed Messages"
  >
    <PanelLoading
      minHeight="400px"
    />
  </Panel>
  <ShareModal
    handleToggle={[Function]}
    open={false}
    query={Array []}
  />
</Page>
`;

exports[`DelayPage:  should show loading panel when aggregates are still loading 1`] = `
<Page
  empty={Object {}}
  title="Delay Report"
>
  <Connect(Filters)
    onShare={[Function]}
    refresh={[Function]}
  />
  <PanelLoading
    minHeight="115px"
  />
  <Panel
    className="ReasonsTable"
    title="Delayed Messages"
  >
    <TableCollection
      columns={
        Array [
          Object {
            "label": "Reason",
            "width": "45%",
          },
          "Domain",
          "Delayed",
          "Delayed First Attempt (%)",
        ]
      }
      defaultSortColumn={null}
      defaultSortDirection="asc"
      getRowData={[Function]}
      pagination={true}
      rows={
        Array [
          Object {
            "count_delayed": 100,
            "count_delayed_first": 1,
            "reason": "my reason",
          },
        ]
      }
    />
  </Panel>
  <ShareModal
    handleToggle={[Function]}
    open={false}
    query={Array []}
  />
</Page>
`;
