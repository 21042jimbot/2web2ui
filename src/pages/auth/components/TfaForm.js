import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Field, reduxForm } from 'redux-form';
import { required } from 'src/helpers/validation';
import { TextFieldWrapper } from 'src/components';

import { Button, Error } from '@sparkpost/matchbox';

export class TfaForm extends Component {

  render() {
    const { error, tfaPending, pristine, handleSubmit } = this.props;

    return (
      <div>
        <div>
          <p className="join-p">Enter the 6-digit code generated by your two-factor auth application, or one of your 8-digit <a target="_blank" rel="noopener noreferrer" href="https://support.sparkpost.com/customer/portal/articles/1948449">backup codes</a>.</p>
        </div>
        <form onSubmit={handleSubmit}>
          <Field
            autoFocus
            name='code'
            id='code'
            label='Code'
            placeholder="123456"
            component={TextFieldWrapper}
            validate={required}
          />
          { error && <Error error={error} /> }

          <Button primary submit disabled={tfaPending || pristine}>
            { tfaPending ? 'Logging In' : 'Log In' }
          </Button>
        </form>
      </div>
    );
  }
}

function mapStateToProps({ tfa }) {
  return {
    tfaPending: tfa.tfaPending,
    initialValues: {
      code: tfa.code
    }
  };
}

const formOptions = {
  form: 'tfaForm'
};

export default connect(mapStateToProps)(reduxForm(formOptions)(TfaForm));

