import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Field, reduxForm, SubmissionError } from 'redux-form';
import { required } from 'src/helpers/validation';
import { TextFieldWrapper } from 'src/components';
import { verifyAndLogin } from 'src/actions/tfa';

import { Button, Error, UnstyledLink } from '@sparkpost/matchbox';
import { LINKS } from 'src/constants';
import styles from './TfaForm.module.scss';


export class TfaForm extends Component {

  handleSubmit = ({ code }) => {
    const { enabled: _enabled, ...authData } = this.props.tfa;

    return this.props.verifyAndLogin({ authData, code }).catch((err) => {
      if (err.response.status === 400 || err.response.status === 403) {
        throw new SubmissionError({
          _error: 'The code is invalid. Please contact login.issues@sparkpost.com for assistance.'
        });
      }
    });
  }

  render() {
    const { tfaPending, pristine, error } = this.props;

    return (
      <div>
        <div>
          <p className="join-p">Enter the code generated by your two-factor auth application, or one of your <UnstyledLink to={LINKS.TFA_BACKUP_CODES} external>backup codes</UnstyledLink>.</p>
        </div>
        <form onSubmit={this.props.handleSubmit(this.handleSubmit)}>
          <Field
            autoFocus
            name='code'
            id='code'
            label='Code'
            placeholder="123456"
            component={TextFieldWrapper}
            validate={required}
            style={{ margin: 0 }}
          />
          {error && <Error wrapper='div' error={error} className={styles.TFASubmissionError}/>}
          <Button primary submit disabled={tfaPending || pristine}>
            {tfaPending ? 'Logging In' : 'Log In'}
          </Button>
        </form>
      </div>
    );
  }
}

function mapStateToProps({ tfa }) {
  return {
    tfa,
    tfaPending: tfa.tfaPending,
    initialValues: {
      code: tfa.code
    }
  };
}

const formOptions = {
  form: 'tfaForm'
};

export default connect(mapStateToProps, { verifyAndLogin })(reduxForm(formOptions)(TfaForm));

