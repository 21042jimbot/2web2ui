// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Page: Dashboard tests should correctly render page when user is not verified 1`] = `
<Page
  empty={Object {}}
  title="Dashboard"
>
  <FreePlanWarningBanner
    account={
      Object {
        "created": 2018-05-15T12:00:00.000Z,
        "status": "active",
        "subscription": Object {
          "code": "paid",
        },
      }
    }
    accountAgeInDays={15}
    ageRangeStart={16}
  />
  <Connect(UsageReport) />
  <Connect(AccessControl)
    condition={[Function]}
  >
    <Tutorial
      account={
        Object {
          "created": 2018-05-15T12:00:00.000Z,
          "status": "active",
          "subscription": Object {
            "code": "paid",
          },
        }
      }
      accountAgeInDays={15}
      accountAgeInWeeks={0}
      canViewTutorialAndSuppressions={true}
      checkSuppression={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      currentUser={
        Object {
          "email_verfied": false,
        }
      }
      hasSuppressions={true}
      listApiKeys={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "id": 0,
              },
            ],
          ],
          "results": undefined,
        }
      }
      listSendingDomains={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      verifyingEmail={false}
    />
  </Connect(AccessControl)>
</Page>
`;

exports[`Page: Dashboard tests should display upgrade CTA when account is free and active 1`] = `
<Page
  empty={Object {}}
  title="Dashboard"
>
  <FreePlanWarningBanner
    account={
      Object {
        "status": "active",
        "subscription": Object {
          "code": "free",
        },
      }
    }
    accountAgeInDays={15}
    ageRangeStart={16}
  />
  <Connect(UsageReport) />
  <Connect(AccessControl)
    condition={[Function]}
  >
    <Tutorial
      account={
        Object {
          "status": "active",
          "subscription": Object {
            "code": "free",
          },
        }
      }
      accountAgeInDays={15}
      accountAgeInWeeks={0}
      canViewTutorialAndSuppressions={true}
      checkSuppression={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      currentUser={
        Object {
          "email_verified": true,
        }
      }
      hasSuppressions={true}
      listApiKeys={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "id": 0,
              },
            ],
          ],
          "results": undefined,
        }
      }
      listSendingDomains={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      verifyingEmail={false}
    />
  </Connect(AccessControl)>
</Page>
`;

exports[`Page: Dashboard tests should render import suppression list when 0 suppressions and new account 1`] = `
<Page
  empty={Object {}}
  title="Dashboard"
>
  <FreePlanWarningBanner
    account={
      Object {
        "created": 2018-05-15T12:00:00.000Z,
        "status": "active",
        "subscription": Object {
          "code": "paid",
        },
      }
    }
    accountAgeInDays={15}
    ageRangeStart={16}
  />
  <Connect(UsageReport) />
  <Connect(AccessControl)
    condition={[Function]}
  >
    <Tutorial
      account={
        Object {
          "created": 2018-05-15T12:00:00.000Z,
          "status": "active",
          "subscription": Object {
            "code": "paid",
          },
        }
      }
      accountAgeInDays={15}
      accountAgeInWeeks={40}
      canViewTutorialAndSuppressions={true}
      checkSuppression={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      currentUser={
        Object {
          "email_verified": true,
        }
      }
      hasSuppressions={false}
      listApiKeys={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "id": 0,
              },
            ],
          ],
          "results": undefined,
        }
      }
      listSendingDomains={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      verifyingEmail={false}
    />
  </Connect(AccessControl)>
</Page>
`;

exports[`Page: Dashboard tests should render page correctly with defaults 1`] = `
<Page
  empty={Object {}}
  title="Dashboard"
>
  <FreePlanWarningBanner
    account={
      Object {
        "created": 2018-05-15T12:00:00.000Z,
        "status": "active",
        "subscription": Object {
          "code": "paid",
        },
      }
    }
    accountAgeInDays={15}
    ageRangeStart={16}
  />
  <Connect(UsageReport) />
  <Connect(AccessControl)
    condition={[Function]}
  >
    <Tutorial
      account={
        Object {
          "created": 2018-05-15T12:00:00.000Z,
          "status": "active",
          "subscription": Object {
            "code": "paid",
          },
        }
      }
      accountAgeInDays={15}
      accountAgeInWeeks={0}
      canViewTutorialAndSuppressions={true}
      checkSuppression={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      currentUser={
        Object {
          "email_verified": true,
        }
      }
      hasSuppressions={true}
      listApiKeys={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "id": 0,
              },
            ],
          ],
          "results": undefined,
        }
      }
      listSendingDomains={
        [MockFunction] {
          "calls": Array [
            Array [],
          ],
          "results": undefined,
        }
      }
      verifyingEmail={false}
    />
  </Connect(AccessControl)>
</Page>
`;
