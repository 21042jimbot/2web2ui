// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BarChart Component renders a normal bar chart correctly 1`] = `
<ResponsiveContainer
  className="SignalsBarChart"
  debounce={0}
  height={50}
  width={100}
>
  <BarChart
    barCategoryGap={1}
    barGap={4}
    data={
      Array [
        Object {
          "date": "2011-01-01",
          "value": 2,
        },
      ]
    }
    layout="horizontal"
    margin={
      Object {
        "bottom": 5,
        "left": 18,
        "right": 0,
        "top": 5,
      }
    }
    reverseStackOrder={false}
    stackOffset="none"
  >
    <Bar
      animationBegin={0}
      animationDuration={400}
      animationEasing="ease"
      cursor="pointer"
      data={Array []}
      dataKey="noKey"
      fill="#5DCFF5"
      hide={false}
      isAnimationActive={false}
      layout="vertical"
      legendType="rect"
      minPointSize={0}
      onAnimationEnd={[Function]}
      onAnimationStart={[Function]}
      onClick={[MockFunction]}
      shape={[Function]}
      stackId="stack"
      xAxisId={0}
      yAxisId={0}
    />
    <CartesianGrid
      fill="none"
      horizontal={true}
      horizontalFill={Array []}
      horizontalPoints={Array []}
      shapeRendering="crispEdges"
      stroke="#e1e1e6"
      vertical={false}
      verticalFill={Array []}
      verticalPoints={Array []}
    />
    <YAxis
      allowDataOverflow={false}
      allowDecimals={true}
      allowDuplicatedCategory={true}
      axisLine={false}
      domain={
        Array [
          0,
          "auto",
        ]
      }
      height={0}
      hide={false}
      minTickGap={2}
      mirror={false}
      orientation="left"
      padding={
        Object {
          "bottom": 0,
          "top": 0,
        }
      }
      reversed={false}
      scale="auto"
      tickCount={5}
      tickLine={false}
      type="number"
      width={30}
      yAxisId={0}
    />
    <XAxis
      allowDataOverflow={false}
      allowDecimals={true}
      allowDuplicatedCategory={true}
      axisLine={false}
      dataKey="date"
      domain={
        Array [
          0,
          "auto",
        ]
      }
      height={30}
      hide={false}
      mirror={false}
      orientation="bottom"
      padding={
        Object {
          "left": 12,
          "right": 12,
        }
      }
      reversed={false}
      scale="auto"
      shapeRendering="crispEdges"
      tickCount={5}
      tickLine={false}
      type="category"
      width={0}
      xAxisId={0}
    />
    <Tooltip
      active={false}
      animationDuration={400}
      animationEasing="ease"
      content={
        <Tooltip>
          [MockFunction]
        </Tooltip>
      }
      contentStyle={Object {}}
      coordinate={
        Object {
          "x": 0,
          "y": 0,
        }
      }
      cursor={false}
      cursorStyle={Object {}}
      filterNull={true}
      isAnimationActive={false}
      itemSorter={[Function]}
      itemStyle={Object {}}
      labelStyle={Object {}}
      offset={25}
      separator=" : "
      useTranslate3d={false}
      viewBox={
        Object {
          "x1": 0,
          "x2": 0,
          "y1": 0,
          "y2": 0,
        }
      }
      wrapperStyle={Object {}}
    />
    <Bar
      animationBegin={0}
      animationDuration={400}
      animationEasing="ease"
      cursor="pointer"
      data={Array []}
      dataKey="value"
      fill="#fill"
      hide={false}
      isAnimationActive={false}
      key="value"
      layout="vertical"
      legendType="rect"
      minPointSize={1}
      onAnimationEnd={[Function]}
      onAnimationStart={[Function]}
      onClick={[MockFunction]}
      stackId="stack"
      xAxisId={0}
      yAxisId={0}
    />
  </BarChart>
</ResponsiveContainer>
`;

exports[`BarChart Component renders a stacked bar chart correctly 1`] = `
Array [
  <Bar
    animationBegin={0}
    animationDuration={400}
    animationEasing="ease"
    cursor="pointer"
    data={Array []}
    dataKey="ab"
    fill="blue"
    hide={false}
    isAnimationActive={false}
    key="ab"
    layout="vertical"
    legendType="rect"
    minPointSize={1}
    onAnimationEnd={[Function]}
    onAnimationStart={[Function]}
    onClick={[MockFunction]}
    stackId="stack"
    xAxisId={0}
    yAxisId={0}
  />,
  <Bar
    animationBegin={0}
    animationDuration={400}
    animationEasing="ease"
    cursor="pointer"
    data={Array []}
    dataKey="cd"
    fill="red"
    hide={false}
    isAnimationActive={false}
    key="cd"
    layout="vertical"
    legendType="rect"
    minPointSize={1}
    onAnimationEnd={[Function]}
    onAnimationStart={[Function]}
    onClick={[MockFunction]}
    stackId="stack"
    xAxisId={0}
    yAxisId={0}
  />,
]
`;

exports[`BarChart Component renders background bars with no opacity if unselected 1`] = `
<Rectangle
  animationBegin={0}
  animationDuration={1500}
  animationEasing="ease"
  height={0}
  isAnimationActive={false}
  isUpdateAnimationActive={false}
  opacity={0}
  radius={0}
  test="test"
  width={0}
  x={0}
  y={0}
/>
`;

exports[`BarChart Component renders background bars with opacity if selected 1`] = `
<Rectangle
  animationBegin={0}
  animationDuration={1500}
  animationEasing="ease"
  height={0}
  isAnimationActive={false}
  isUpdateAnimationActive={false}
  opacity={0.4}
  radius={0}
  test="test"
  width={0}
  x={0}
  y={0}
/>
`;
