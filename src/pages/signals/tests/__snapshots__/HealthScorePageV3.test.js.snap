// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signals Health Score Page V3 renders correctly when receiving data 1`] = `
<SignalsPage
  breadcrumbAction={
    Object {
      "component": [Function],
      "content": "Back to Health Score Overview",
      "to": "/signals/health-score",
    }
  }
  facet="sending-domain"
  facetId="test.com"
  primaryArea={
    <Button
      component={[Function]}
      primary={true}
      size="default"
      to="/alerts/create"
    >
      Create Alert
    </Button>
  }
  title="Health Score"
>
  <Panel>
    <Panel.Section>
      <Grid>
        <Grid.Column
          xs={8}
        >
          <HealthScoreMetric
            score={NaN}
          />
        </Grid.Column>
        <Grid.Column
          xs={4}
        >
          <Connect(DateFilter)
            left={true}
          />
          <HealthScoreLegend />
        </Grid.Column>
      </Grid>
      <BarChart
        activeFill="#22838A"
        disableHover={false}
        fill="#B3ECEF"
        gap={1}
        height={250}
        margin={
          Object {
            "bottom": 5,
            "left": 18,
            "right": 8,
            "top": 21,
          }
        }
        timeSeries={Array []}
        tooltipContent={[Function]}
        width="99%"
        xAxisProps={
          Object {
            "tickFormatter": [Function],
            "ticks": undefined,
          }
        }
        xAxisRefLines={
          Array [
            Object {
              "label": Object {
                "className": "xDividerLabel",
                "offset": 14,
                "position": "top",
                "value": "New",
              },
              "stroke": "#d2d2d7",
              "strokeWidth": 1,
              "x": "2019-06-07",
            },
            Object {
              "label": Object {
                "className": "xDividerLabel",
                "position": "top",
                "value": "Model",
              },
              "strokeWidth": 0,
              "x": "2019-06-07",
            },
          ]
        }
        xKey="date"
        yAxisProps={
          Object {
            "tickFormatter": [Function],
            "ticks": Array [
              0,
              0.55,
              0.8,
              1,
            ],
          }
        }
        yAxisRefLines={
          Array [
            Object {
              "stroke": "#2CC995",
              "strokeWidth": 1,
              "y": 0.8,
            },
            Object {
              "stroke": "#FF594D",
              "strokeWidth": 1,
              "y": 0.55,
            },
          ]
        }
        yKey="health_score"
        yRange={
          Array [
            "auto",
            "auto",
          ]
        }
      />
    </Panel.Section>
  </Panel>
</SignalsPage>
`;
