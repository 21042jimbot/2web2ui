// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Redux-form field wrappers CheckboxWrapper Render: case: 1 1`] = `
<Checkbox
  checked={true}
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  pass="through-prop"
  required={false}
  value={true}
/>
`;

exports[`Redux-form field wrappers CheckboxWrapper Render: case: 2 1`] = `
<Checkbox
  checked={false}
  error="error message"
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  pass="through-prop"
  required={false}
  value={false}
/>
`;

exports[`Redux-form field wrappers PoolTypeaheadWrapper should render 1`] = `
<PoolTypeahead
  name="ipPool"
  pools={
    Array [
      "pool 1",
      "pool 2",
    ]
  }
  selectedItem={
    Object {
      "pool": "selected pool",
    }
  }
/>
`;

exports[`Redux-form field wrappers RadioGroup should render 1`] = `
<Radio.Group>
  Radio Group
  <Radio
    checked={true}
    disabled={false}
    id="1"
    input={
      Object {
        "name": "field-name",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "field-value",
      }
    }
    key="1"
    label="1"
    meta={
      Object {
        "active": false,
        "error": "error message",
        "touched": false,
      }
    }
    pass="through-prop"
    value="one"
  />
  <Radio
    checked={false}
    disabled={true}
    id="2"
    input={
      Object {
        "name": "field-name",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "field-value",
      }
    }
    key="2"
    label="2"
    meta={
      Object {
        "active": false,
        "error": "error message",
        "touched": false,
      }
    }
    pass="through-prop"
    value="two"
  />
  <Radio
    checked={false}
    disabled={false}
    id="1"
    input={
      Object {
        "name": "field-name",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "field-value",
      }
    }
    key="1"
    label="1"
    meta={
      Object {
        "active": false,
        "error": "error message",
        "touched": false,
      }
    }
    pass="through-prop"
    value="three"
  />
</Radio.Group>
`;

exports[`Redux-form field wrappers SelectWrapper Render: case: 1 1`] = `
<Select
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  options={
    Array [
      1,
      2,
      3,
    ]
  }
  pass="through-prop"
  placeholderValue=""
  required={false}
  value="field-value"
/>
`;

exports[`Redux-form field wrappers SelectWrapper Render: case: 2 1`] = `
<Select
  error="error message"
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  options={
    Array [
      1,
      2,
      3,
    ]
  }
  pass="through-prop"
  placeholderValue=""
  required={false}
  value="field-value"
/>
`;

exports[`Redux-form field wrappers SubaccountTypeaheadWrapper Render: case: 1 1`] = `
<Connect(SubaccountTypeahead)
  name="field-name"
  onChange={[MockFunction]}
  pass="through-prop"
  selectedItem={
    Object {
      "name": "sub 101",
      "subaccount_id": 101,
    }
  }
/>
`;

exports[`Redux-form field wrappers SubaccountTypeaheadWrapper Render: case: 2 1`] = `
<Connect(SubaccountTypeahead)
  error="error message"
  name="field-name"
  onChange={[MockFunction]}
  pass="through-prop"
  selectedItem={
    Object {
      "name": "sub 101",
      "subaccount_id": 101,
    }
  }
/>
`;

exports[`Redux-form field wrappers TextFieldWrapper Render: case: 1 1`] = `
<TextField
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  pass="through-prop"
  required={false}
  resize="both"
  type="text"
  value="field-value"
/>
`;

exports[`Redux-form field wrappers TextFieldWrapper Render: case: 2 1`] = `
<TextField
  error="error message"
  id="field-name"
  name="field-name"
  onBlur={[MockFunction]}
  onChange={[MockFunction]}
  pass="through-prop"
  required={false}
  resize="both"
  type="text"
  value="field-value"
/>
`;
